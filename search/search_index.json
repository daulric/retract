{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>ReTract is a creator used to make virtual guis and objects using tables.</p> <p>Its a module just like Roblox's Roact but more simpler.</p>"},{"location":"#why-choose-retractui","title":"Why Choose ReTractUI","text":"<ul> <li>It is much simpler and easier to use.</li> <li>It is probaly faster and efficient.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can download ReTractUI package straight from Wally.</p> <p>New Updates</p> <p>New Updates will be coming to ReTractUI in the future</p> <p></p>"},{"location":"Introduction/Build/","title":"Build","text":"<p>You can build, destroy or update elements with ReTractUI. </p> <p>Just know how to make the element. \ud83d\ude02</p>"},{"location":"Introduction/Build/#mount","title":"Mount","text":""},{"location":"Introduction/Build/#api","title":"Api","text":"<pre><code>ReTract.mount(element, tree) -&gt; element\n</code></pre>"},{"location":"Introduction/Build/#example","title":"Example","text":"<p><pre><code>local handle = ReTract.mount(element, game.Players.LocalPlayer.PlayerGui)\n</code></pre> Element param derived from the Element Page</p>"},{"location":"Introduction/Build/#unmount","title":"Unmount","text":""},{"location":"Introduction/Build/#api_1","title":"Api","text":"<p>This disconnect the tree from the Hub and destroy the instance with it.</p> <p><pre><code>ReTractUI.unmount(tree: element) -&gt; Instance\n</code></pre> This will return the parent that was in the tree.</p>"},{"location":"Introduction/Build/#example_1","title":"Example","text":"<p><pre><code>ReTract.unmount(handle)\n</code></pre> Handle derived from here</p>"},{"location":"Introduction/Build/#update","title":"Update","text":"<p>All this does is unmount the current tree and mount the new tree.</p>"},{"location":"Introduction/Build/#api_2","title":"Api","text":"<pre><code>ReTractUI.update(currentTree, newTree) -&gt; element\n</code></pre>"},{"location":"Introduction/Build/#example_2","title":"Example","text":"<pre><code>handle = ReTractUI.update(handle, newTree)\n</code></pre> <p>The handle param derived from here.</p> <p>The newTree param derived from here.</p> <p>Note</p> <p>The <code>update</code> method uses the <code>mount</code> and <code>unmount</code> method.</p>"},{"location":"Introduction/Change/","title":"Change","text":"<p>You can make change signal with ReTractUI</p> <p>This is how its done.</p>"},{"location":"Introduction/Change/#api","title":"Api","text":"<pre><code>ReTractUI.Change[object property] --&gt; this will retun the property name for the object.\n</code></pre> <p>Reference</p> <p>When you use something like <code>ReTractUI.Change.Text</code>, it will return <code>Changed:Text</code> as a string</p>"},{"location":"Introduction/Change/#example","title":"Example","text":"<pre><code>ReTractUI.createElement(\"TextLabel\", {\n[ReTractUI.Change.Text] = function(element, text)\nprint(`text changed in {element.Name}: New Text: {element.Text}`)\nend\n})\n</code></pre> <p>That how you make property change signals.</p>"},{"location":"Introduction/Element/","title":"Element","text":"<p>There are two types of Elements class:</p>"},{"location":"Introduction/Element/#element","title":"Element","text":""},{"location":"Introduction/Element/#api-for-element","title":"Api For Element","text":"<pre><code>type props = {[any]: any}\ntype children = {[any]: any}\nReTractUI.createElement(class: any, properties: props, components: children) -&gt; element\n</code></pre>"},{"location":"Introduction/Element/#example-when-using-element","title":"Example When Using Element","text":"<pre><code>ReTractUI.createElement(\"ScreenGui\", {\nName = \"ReTractUI\",\n}, {\nFrame = ReTractUI.createElement(\"Frame\", {\nName = \"ReTract Frame\",\nSize = Udim2.new(0.5, 0, 0.5, 0)\n})\n})\n</code></pre>"},{"location":"Introduction/Element/#functional-elements","title":"Functional Elements","text":"<p>Elements can be functional as well. <pre><code>function build(props)\nreturn ReTractUI.createElement(\"ScreenGui\", {\nName = \"ReTractUI\"\n}, {\nFrame = ReTractUI.createElement(\"Frame\", {\nName = props.name,\nSize = Udim2.new(0.5, 0, 0.5, 0)\n})\n})\nend\nReTract.createElement(build, {\nname = \"ReTract\"\n})\n</code></pre></p>"},{"location":"Introduction/Element/#component-element","title":"Component Element","text":"<pre><code>local myComp = ReTractUI.Component:extend(name: string)\nfunction myComp:init()\nself:setState({\nname = \"John\"\n})\nend\nfunction myComp:render()\nreturn ReTractUI.createElement(\"TextLabel\", {\nName = self.state.name -- john\nText = self.state.text\n})\nend\nreturn myComp\n-- In the Local Script\nReTractUI.createElement(require(path.to.module), {\ntext = \"john doe is the best\" -- &gt; this will add to the state.\n})\n</code></pre>"},{"location":"Introduction/Element/#fragments","title":"Fragments","text":"<p>Instead of Using Create Element to have children, you can use fragments to create multiple children.</p>"},{"location":"Introduction/Element/#api","title":"Api","text":"<pre><code>type Fragment = {[any]: elements}\nlocal chidrens = ReTractUI.createFragment(index: Fragment) -&gt; Fragments\n</code></pre>"},{"location":"Introduction/Element/#example","title":"Example","text":"<pre><code>local Fragment = ReTractUI.createFragment({\nReTractUI.createElement(\"StringValue\", {\nValue = \"Fragment working\",\nName = \"ReTract String\"\n}),\nReTractUI.createElement(\"BoolValue\", {\nValue = true,\nName = \"ReTract Boolean\"\n})\n})\n-- parenting fragments to ScreenGui\nReTractUI.createElement(\"ScreenGui\", {\nName = \"ReTractUI\",\n}, {\nFrame = ReTractUI.createElement(\"Frame\", {\nName = \"ReTract Frame\",\nSize = Udim2.new(0.5, 0, 0.5, 0)\n}),\nFragment, -- Fragment in the components area\n})\n</code></pre>"},{"location":"Introduction/Event/","title":"Event","text":"<p>You can create event signal with ReTractUI. </p>"},{"location":"Introduction/Event/#api","title":"Api","text":"<pre><code>ReTractUI.Event[object event] --&gt; this will retun the event name for the object\n</code></pre>"},{"location":"Introduction/Event/#example","title":"Example","text":"<pre><code>ReTractUI.createElement(\"TextButton\", {\n[ReTractUI.Event.MouseButton1Click] = function(element)\nprint(element.Name)\nend,\n})\n</code></pre> <p>Note</p> <p>In this code, it will print the gui name everytime the button is clicked</p>"}]}