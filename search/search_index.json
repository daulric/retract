{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>ReTract is a UI lua library just like Roblox's Roact and Facebook React. It has similar API and structure like Roact.</p> <p>This documentation is based of the structure of the Roact documentation that is provided. The project is a work in progress. If you are experiencing any errors or problems, don't be afraid to report any issues to state your problem. The problem will be fixed in any upcoming updates.</p> <p>Not a Copy</p> <p>This is not a direct copy of the Roact Module. Most of the code was made by me. Do not say its a direct copy of the Roact Module.</p>"},{"location":"#why-choose-retract","title":"Why Choose ReTract","text":"<ul> <li>It is much simpler and easier to use.</li> <li>It is probaly faster and efficient.</li> <li>It has a table-based programing structure.</li> </ul>"},{"location":"#names-before-the-current-name","title":"Names Before The Current Name!","text":"<ul> <li>Uact</li> <li>ReTractUI</li> </ul> <p>Info</p> <p>If you don't know how to program in lua, try learning or reading the Lua Documentation or read a book about lua programing by Roberto Ierusalimschy</p>"},{"location":"api-reference/","title":"Api Reference","text":""},{"location":"api-reference/#methods","title":"Methods","text":""},{"location":"api-reference/#retractcreateelement","title":"ReTract.createElement","text":"<p><pre><code>ReTract.createElement(class: any, [props, [children]]) -&gt; element\ntype element = {\n[element validation]\nclass: any,\nprops: {[any]: any},\nchildren: {[any]: any}\n}\n</code></pre> This creates a tree to be mounted</p>"},{"location":"api-reference/#retractcreatefragment","title":"ReTract.createFragment","text":"<p><pre><code>ReTract.createFragment(index: trees) -&gt; Fragment\ntype Fragment = {\n[fragment validation],\nelements: {[any]: any},\n}\n</code></pre> This creates a fragment that contains elements / trees inside the index.</p>"},{"location":"api-reference/#retractmount","title":"ReTract.mount","text":"<p><pre><code>ReTract.mount(element: tree, path: Instance) -&gt; tree\n</code></pre> This mounts the element to the path.</p>"},{"location":"api-reference/#retractunmount","title":"ReTract.unmount","text":"<p><pre><code>ReTract.unmount(element: tree) -&gt; void\n</code></pre> This unmount and destroy instances from the tree in the path</p>"},{"location":"api-reference/#retractupdate","title":"ReTract.update","text":"<p><pre><code>ReTract.update(currentTree: tree, newTree: tree) -&gt; tree\n</code></pre> This updates the currrent tree.</p>"},{"location":"api-reference/#component-types","title":"Component Types","text":""},{"location":"api-reference/#retractcomponent","title":"ReTract.Component","text":"<p>This return creates a component with <code>:extend(name)</code> to create a component element</p> <pre><code>local component = ReTract.Component:extend(name)\n</code></pre>"},{"location":"api-reference/#retractgateway","title":"ReTract.Gateway","text":"<p>This ports the element to another path in the game instead of the nested parent tree. This is important incase the nested tree is very deep.</p> <pre><code>ReTract.Gateway -&gt; Gateway\n</code></pre> <p>Example <pre><code>ReTract.createElement(ReTract.Gateway, {\npath = game.Workspace\n}, {\nReTract.createElement(\"ScreenGui\", {Name = \"ReTract Gateway\"}, {\nReTract.createElement(\"Frame\", {\nName = \"ReTract Gaeway Frame\",\nSize = UDim2.new(1, 0, 1, 0),\nBackgroundColor3 = Color3.fromRGB(7, 90, 255)\n})\n})\n})\n</code></pre></p> <p>This creates a gateway that ports instance to the path and the mounted path when <code>.mount</code> is called</p>"},{"location":"api-reference/#constants","title":"Constants","text":""},{"location":"api-reference/#retractchildren","title":"ReTract.Children","text":"<pre><code>ReTract.Children -&gt; Children\n</code></pre> <p>This returns the children in the element when <code>createElement</code> is used.</p> <p>Example with Functional Elements <pre><code>function buildFrameWithChildren(props)\nreturn ReTract.createElement(\"Frame\", {\nName = \"Hello\",\nSize = UDim2.new(1, 0, 1, 0)\n}, props[ReTract.Children])\nend\n</code></pre></p> <p>Example with Component Element <pre><code>local Component = ReTract.Component:extend(\"Example\")\nfunction Component:render()\nreturn ReTract.createElement(\"Frame\", {\nName = \"Hello\",\nSize = UDim2.new(1, 0, 1, 0)\n}, self.props[ReTract.Children])\nend\nreturn Component\n</code></pre></p>"},{"location":"api-reference/#retractevent","title":"ReTract.Event","text":"<p><pre><code>ReTract.Event[Event_Name] -&gt; function\n</code></pre> This handles event in the Instance</p> <p>Usage</p> <pre><code>[ReTract.Event.MouseButton1Click] = function(element)\nprint(\"button clicked!\")\nend\n</code></pre>"},{"location":"api-reference/#retractchange","title":"ReTract.Change","text":"<p><pre><code>ReTract.Change[Property Name] -&gt; function\n</code></pre> This wait for the property change signal in the Instance.</p> <p>Usage <pre><code>[ReTract.Change.Text] = function(element)\nprint(element.Text)\nend\n</code></pre></p>"},{"location":"api-reference/#retractattribute","title":"ReTract.Attribute","text":"<p><pre><code>ReTract.Attribute[Attribute_Name] -&gt; any\n</code></pre> This creates an attribute in the instance</p> <p>Usage <pre><code>[ReTract.Attribute.Hello] = \"ReTract Attribute\"\n</code></pre></p>"},{"location":"api-reference/#retractattributechange","title":"ReTract.AttributeChange","text":"<pre><code>ReTract.AttributeChange[Attribute_Name] -&gt; function\n</code></pre> <p>This listens for when the attribute changes.</p> <p>Usage <pre><code>[ReTract.AttributeChange.Hello] = function(element)\nprint(element:GetAttribute(\"Hello\"))\nend\n</code></pre></p>"},{"location":"api-reference/#component-api-and-lifecycle","title":"Component Api and Lifecycle","text":""},{"location":"api-reference/#setstate","title":"setState","text":"<pre><code>self:setState(any) -&gt; void\n</code></pre> <p>This sets the state in the component</p>"},{"location":"api-reference/#state","title":"state","text":"<pre><code>self.state -&gt; state\n</code></pre> <p>This returns the state that was setted by <code>setState</code>.</p>"},{"location":"api-reference/#init","title":"init","text":"<p>This initialize the component.</p> <p><code>:init</code></p> <p>Usage <pre><code>function component:init()\nself:setState({\nname = \"John Pork\"\n})\nend\n</code></pre></p>"},{"location":"api-reference/#render","title":"render","text":"<p>This returns the element in the component</p> <p><code>:render</code></p> <p>Usage <pre><code>function component:render()\nreturn ReTract.createElement(\"Frame\", {\nName = self.state.name\n})\nend\n</code></pre></p>"},{"location":"api-reference/#didmount","title":"didMount","text":"<p>This listens for when the component is mounted.</p> <p><code>:didMount</code></p> <p>Usage</p> <pre><code>function component:didMount()\nprint(\"component is mounted!\")\nend\n</code></pre>"},{"location":"api-reference/#willupdate","title":"willUpdate","text":"<p>This listens for when the component is going to be updated</p> <p><code>:willUpdate</code></p> <p>Usage</p> <pre><code>function component:willUpdate()\nprint(\"This component is going to be updated!\")\nend\n</code></pre>"},{"location":"api-reference/#didupdate","title":"didUpdate","text":"<p>This listens for when the component is updated</p> <p><code>:didUpdate</code></p> <p>Usage <pre><code>function component:didUpdate()\nprint(\"component was updated!\")\nend\n</code></pre></p>"},{"location":"api-reference/#willunmount","title":"willUnmount","text":"<p>This listens for when component is going to be be unmounted.</p> <p><code>:willUnmount</code></p> <p>Usage <pre><code>function component:willUnmount()\nprint(\"component is going to be unmounted\")\nend\n</code></pre></p>"},{"location":"api-reference/#didunmount","title":"didUnmount","text":"<p>This listens for when component is unmounted</p> <p><code>:didUnmount</code></p> <p>Usage</p> <pre><code>function component:didUnmount()\nprint(\"this component is unmounted\")\nend\n</code></pre>"},{"location":"Guide/Components/","title":"Components","text":"<p>Managing and handling ReTract Components.</p> <pre><code>local component = ReTract.Component:extend(\"Component\")\nfunction component:init()\nself:setState({\nnumber = 10,\ncoins = 1\n})\nend\nfunction component:willUnmount()\nself.props.num = 0\nself.props.coins = 0\nend\nfunction component:didUnmount()\nprint(\"component is unmounted\")\nend\nfunction component:didUpdate()\nprint(\"component is updated\")\nend\nfunction component:willUpdate()\nself.props.num += 100\nself.props.coins += 10\nend\nfunction component:render()\nreturn ReTract.createElement(\"TextButton\", {\n[ReTract.Change.Text] = function(element)\nself.props.coins += self.state.number\nprint(`text changed in {element.Name}: New Text: {element.Text}`)\nend,\n[ReTract.Attribute.Hello] = \"Hello\" --&gt; this is an attribute,\n[ReTract.AttributeChange.Hello] = function(element)\nself.props.num += self.state.number\nprint(`attribute canged in {element.Name}: New Attribute: {element:GetAttribute(\"Hello\")}`)\nend,\n[ReTract.Event.MouseButton1Click] = function(element)\nelement.Text = \"ReTract:\"..self.props.num\nelement:SetAttribute(\"Hello\", \"ReTract Coins: \"..self.props.coins)\nend,\n}, self.props[ReTract.Children])\nend\nreturn component\n--// In the Local Script\nlocal component = require(path.to.module)\nlocal element = ReTract.createElement(component, {\ncoins = 100,\nnum = 10,\n}, {\nReTract.createElement(\"Part\", {\nName = \"Hello\"\n})\n})\nlocal handle = ReTract.mount(element, game.Players.LocalPlayer.PlayerGui)\nwhile task.wait(10) do\nhandle = ReTract.update(handle, ReTract.createElement(component, {\ncoins = 90,\nnum = 10,\n}, {\nReTract.createElement(\"Part\", {\nName = \"Hello: Part\"\n})\n}))\nend\n</code></pre> <p>This is an example on how ReTract Componet are created and used.</p>"},{"location":"Guide/Elements/","title":"Elements","text":"<p>There are three types of Elements:</p> <ul> <li>Host</li> <li>Functional</li> <li>Stateful</li> </ul>"},{"location":"Guide/Elements/#element","title":"Element","text":""},{"location":"Guide/Elements/#host-element","title":"Host Element","text":"<pre><code>local handle = ReTract.createElement(\"ScreenGui\", {\nName = \"ReTract\",\n}, {\nFrame = ReTract.createElement(\"Frame\", {\nName = \"ReTract Frame\",\nSize = Udim2.new(0.5, 0, 0.5, 0)\n})\n})\n</code></pre>"},{"location":"Guide/Elements/#functional-elements","title":"Functional Elements","text":"<p>Elements can be functional as well. <pre><code>function build(props)\nreturn ReTract.createElement(\"ScreenGui\", {\nName = \"ReTract\"\n}, {\nFrame = ReTract.createElement(\"Frame\", {\nName = props.name,\nSize = Udim2.new(0.5, 0, 0.5, 0)\n})\n}, props[ReTract.Children])\nend\n</code></pre></p>"},{"location":"Guide/Elements/#stateful-element","title":"Stateful Element","text":"<pre><code>local myComp = ReTract.Component:extend(name: string)\nfunction myComp:init()\nself:setState({\nname = \"John\"\n})\nend\nfunction myComp:render()\nreturn ReTract.createElement(\"TextLabel\", {\nName = self.state.name -- john\nText = self.state.text\n}, self.props[ReTract.Children])\nend\nreturn myComp\n</code></pre>"},{"location":"Guide/Elements/#fragments","title":"Fragments","text":"<p>Instead of Using Create Element to have children, you can use fragments to create multiple children.</p> <pre><code>local Fragments = ReTract.createFragment({\nReTract.createElement(\"StringValue\", {\nValue = props.value,\nName = props.name\n}),\nReTract.createElement(\"BoolValue\", {\nValue = true,\nName = props.name2\n})\n})\n-- parenting fragments to ScreenGui\nReTract.createElement(Fragments, {\nvalue = \"hello\",\nname = \"Fragment\",\nname2 = \"Fragment2\"\n})\n</code></pre>"},{"location":"Guide/Elements/#mounting-element","title":"Mounting Element","text":"<p>This mounts the element to the instance which is the parent and it will return the tree.</p> <pre><code>local handle = ReTract.createElement(require(path.to.module), {\ntext = \"john doe is the best\" -- &gt; this will add to the state.\n}, {\nReTract.createElement(\"TextLabel\", {\nName = \"Hello\"\n})\n})\nReTract.mount(handle, game.Players.LocalPlayer)\n</code></pre>"},{"location":"Guide/Elements/#updating-element","title":"Updating Element","text":"<p>This will update the original tree and take the place </p> <pre><code>handle = ReTract.update(handle, ReTract.createElement(require(path.to.module), {\ntext = \"ReTract UI\"    \n}, {\nReTract.createElement(\"TextLabel\", {\nName = \"Hello\",\n}),\n}))\n</code></pre>"},{"location":"Guide/Elements/#unmouting-element","title":"Unmouting Element","text":"<p>This will dismantle and destroy the element from the hub.</p> <pre><code>ReTract.unmount(handle)\n</code></pre>"},{"location":"Guide/Installation/","title":"Installation","text":"<p>To download the ReTract module, you can get it from 2 methods:</p>"},{"location":"Guide/Installation/#method-1-file-system","title":"Method 1: File System","text":"<ul> <li>Download the Github Repository from here.</li> <li>Copy the <code>src</code> directory into your project.</li> <li>Use a plugin Rojo or Argon to port it to your game.</li> </ul>"},{"location":"Guide/Installation/#method-2-wally","title":"Method 2: Wally","text":"<ul> <li>You can download the package from wally by clicking the button below.</li> <li>Use a plugin like Rojo or Argon to port it to your game.</li> </ul> <p>New Updates</p> <p>New Updates will be coming to ReTract in the future</p>"}]}