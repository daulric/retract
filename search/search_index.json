{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>ReTract is a module used to make virtual guis and objects using tables.</p> <p>Its a module just like Roblox's Roact but more simpler.</p>"},{"location":"#why-choose-retract","title":"Why Choose ReTract","text":"<ul> <li>It is much simpler and easier to use.</li> <li>It is probaly faster and efficient.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can download ReTract package straight from Wally.</p> <p>New Updates</p> <p>New Updates will be coming to ReTract in the future</p> <p></p>"},{"location":"api-reference/","title":"Api Reference","text":""},{"location":"api-reference/#methods","title":"Methods","text":"<p>Coming Soon!</p>"},{"location":"Guide/Element/","title":"Element","text":"<p>There are three types of Elements:</p> <ul> <li>Host</li> <li>Functional</li> <li>Stateful</li> </ul>"},{"location":"Guide/Element/#element","title":"Element","text":""},{"location":"Guide/Element/#host-element","title":"Host Element","text":"<pre><code>local handle = ReTract.createElement(\"ScreenGui\", {\nName = \"ReTract\",\n}, {\nFrame = ReTract.createElement(\"Frame\", {\nName = \"ReTract Frame\",\nSize = Udim2.new(0.5, 0, 0.5, 0)\n})\n})\n</code></pre>"},{"location":"Guide/Element/#functional-elements","title":"Functional Elements","text":"<p>Elements can be functional as well. <pre><code>function build(props)\nreturn ReTract.createElement(\"ScreenGui\", {\nName = \"ReTract\"\n}, {\nFrame = ReTract.createElement(\"Frame\", {\nName = props.name,\nSize = Udim2.new(0.5, 0, 0.5, 0)\n})\n}, props[ReTract.Children])\nend\n</code></pre></p>"},{"location":"Guide/Element/#stateful-element","title":"Stateful Element","text":"<pre><code>local myComp = ReTract.Component:extend(name: string)\nfunction myComp:init()\nself:setState({\nname = \"John\"\n})\nend\nfunction myComp:render()\nreturn ReTract.createElement(\"TextLabel\", {\nName = self.state.name -- john\nText = self.state.text\n}, self.props[ReTract.Children])\nend\nreturn myComp\n</code></pre>"},{"location":"Guide/Element/#fragments","title":"Fragments","text":"<p>Instead of Using Create Element to have children, you can use fragments to create multiple children.</p> <pre><code>local Fragments = ReTract.createFragment({\nReTract.createElement(\"StringValue\", {\nValue = \"Fragment working\",\nName = \"ReTract String\"\n}),\nReTract.createElement(\"BoolValue\", {\nValue = true,\nName = \"ReTract Boolean\"\n})\n})\n-- parenting fragments to ScreenGui\nReTract.createElement(\"ScreenGui\", {\nName = \"ReTract\",\n}, {\nFrame = ReTract.createElement(\"Frame\", {\nName = \"ReTract Frame\",\nSize = Udim2.new(0.5, 0, 0.5, 0)\n}),\nFragments, -- Fragment in the components area\n})\n</code></pre>"},{"location":"Guide/Element/#mounting-element","title":"Mounting Element","text":"<pre><code>local handle = ReTract.createElement(require(path.to.module), {\ntext = \"john doe is the best\" -- &gt; this will add to the state.\n}, {\nReTract.createElement(\"TextLabel\", {\nName = \"Hello\"\n})\n})\nReTract.mount(handle, game.Players.LocalPlayer)\n</code></pre>"},{"location":"Guide/Signal/","title":"Signal","text":"<p>Managing Events, Attributes, Property and Attribute Change Signals</p> <p>This is how its done.</p> <p>Reference</p> <p>When you use something like <code>ReTract.Change.Text</code>, it will return <code>Changed:Text</code> as a string</p> <pre><code>ReTract.createElement(\"TextButton\", {\n[ReTract.Change.Text] = function(element)\nprint(`text changed in {element.Name}: New Text: {element.Text}`)\nend,\n[ReTract.Attribute.Hello] = \"Hello\" --&gt; this is an attribute,\n[ReTract.AttributeChange.Hello] = function(element)\n--&gt; this will listen for element attribute changes; in this case its `Hello`\nend,\n[ReTract.Event.MouseButton1Click] = function(element)\n--&gt; in this case the element is a button; it will listen for when button is clicked\nend,\n})\n</code></pre> <p>That how you make property change signals.</p>"}]}